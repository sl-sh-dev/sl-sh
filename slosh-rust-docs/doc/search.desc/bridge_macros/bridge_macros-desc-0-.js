searchState.loadedDescShard("bridge_macros", 0, "TODO PC MACROS crate wish list\nContains the error value\nContains the success value\nOptional and VarArgs types are supported to create the …\ncreate a vec literal of the expected Param types so code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nwrite the builtin_ version of the provided function. This …\ncreate two lists that can be joined by macro syntax to …\nwrite the intern_ function code. This code is generated to …\nwrite the parse_ version of the provided function. The …\nthis function outputs all the generated code, it is …\nPull out every #doc attribute on the target fn for the …\nreturn the function names the macro will create. Given a …\nreturn the function names the macro will create. Given a …\nreturns the option of inner type and the wrapped generic …\nat this point the macro is only operating on types it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNone if not Rust type vec\ngenerate an (optionally inlined) call to the original fn …\nfor regular Value values (no Optional/VarArgs) ref_exp …\nrecursively wrap the received sl_sh args at the given idx …\nfor <code>Option&lt;Value&gt;</code> values the ref_exp must first be parsed …\nCreate a <code>Vec&lt;Param&gt;</code> from the original fn’s signature. …\ncreate the nested match statements to parse rust types …\nif expecting a Vec then the actual expression itself …\nmacro that creates a bridge between rust native code and …\nreturn a code for how to refer to the inner exp enum …")