searchState.loadedDescShard("builtins", 0, "Helper enum to “force” a given function to be noop’…\nReturns the argument unchanged.\nUsage: (get-in-namespace ’SYMBOL)\nUsage: (get-namespaces)\nCalls <code>U::from(self)</code>.\nUsage: (get-in-namespace ’SYMBOL)\nUsage: (get-namespaces)\nUsage: (platform)\nUsage: (platform)\nUsage: (hash-clear! hashmap)\nUsage: (hash-haskey? hashmap key)\nUsage: (hash-keys hashmap)\nUsage: (in? needle haystack)\nUsage: (occurs (list 1 2 …) 7)\nUsage: (hash-clear! hashmap)\nUsage: (hash-haskey? hashmap key)\nUsage: (hash-keys hashmap)\nUsage: (in? needle haystack)\nUsage: (occurs (list 1 2 …) 7)\nUsage: (reverse items)\nUsage: (to-list any)\nUsage: (to-list any)\nUsage: (reverse items)\nUsage: (to-list any)\nUsage: (to-list any)\nUsage: (cd dir-to-change-to)\nUsage: (glob /path/with/*)\nUsage: (fs-accessed /path/to/file/or/dir)\nUsage: (fs-base /path/to/file/or/dir)\nUsage: (fs-crawl /path/to/file/or/dir (fn (x) (prn “…\nUsage: (fs-fullpath “~/some/filepath/../”) -&gt; nil\nUsage: (fs-len /path/to/file/or/dir)\nUsage: (fs-modified /path/to/file/or/dir)\nUsage: (fs-parent /path/to/file/or/dir)\nUsage: (fs-dir? path-to-test)\nUsage: (fs-file? path-to-test)\nUsage: (fs-same? /path/to/file/or/dir /path/to/file/or/dir)\nUsage: (cd dir-to-change-to)\nUsage: (glob /path/with/*)\nUsage: (fs-accessed /path/to/file/or/dir)\nUsage: (fs-base /path/to/file/or/dir)\nUsage: (fs-crawl /path/to/file/or/dir (fn (x) (prn “…\nUsage: (fs-fullpath “~/some/filepath/../”) -&gt; nil\nUsage: (fs-len /path/to/file/or/dir)\nUsage: (fs-modified /path/to/file/or/dir)\nUsage: (fs-parent /path/to/file/or/dir)\nUsage: (fs-dir? path-to-test)\nUsage: (fs-file? path-to-test)\nUsage: (fs-same? /path/to/file/or/dir /path/to/file/or/dir)\nUsage: (fs-exists? path-to-test)\nUsage: (sleep milliseconds) -&gt; nil\nUsage: (fs-exists? path-to-test)\nUsage: (sleep milliseconds) -&gt; nil\nUsage: (temp-dir)\nUsage: (get-temp [“/path/to/directory/to/use/as/base” …\nUsage: (get-temp-file [“/path/to/directory/to/use/as/base…\nUsage: (temp-dir)\nUsage: (get-temp [“/path/to/directory/to/use/as/base” …\nUsage: (get-temp-file [“/path/to/directory/to/use/as/base…\nUsage: (fs-rm &quot;/dir/or/file/to/remove&quot;)\nUsage: (fs-rm &quot;/dir/or/file/to/remove&quot;)\nUsage: (abs arg)\nUsage: (arccos value)\nUsage: (arcsin value)\nUsage: (arctan value)\nUsage: (ceil num)\nUsage: (cos radians)\nUsage: (exp power)\nUsage: (floor num)\nUsage: (fract num)\nUsage: (log num [base])\nUsage: (log2 num)\nUsage: (max number+)\nUsage: (min number+)\nUsage: (abs arg)\nUsage: (arccos value)\nUsage: (arcsin value)\nUsage: (arctan value)\nUsage: (ceil num)\nUsage: (cos radians)\nUsage: (exp power)\nUsage: (floor num)\nUsage: (fract num)\nUsage: (log num [base])\nUsage: (log2 num)\nUsage: (max number+)\nUsage: (min number+)\nUsage: (pow base power)\nUsage: (% int int)\nUsage: (rem int int)\nUsage: (rem-euclid int int)\nUsage: (round num)\nUsage: (sin radians)\nUsage: (sqrt num)\nUsage: (tan radians)\nUsage: (2pow base)\nUsage: (pow base power)\nUsage: (% int int)\nUsage: (rem int int)\nUsage: (rem-euclid int int)\nUsage: (round num)\nUsage: (sin radians)\nUsage: (sqrt num)\nUsage: (tan radians)\nUsage: (2pow base)\nTODO PC make the other builtins.\nUsage: (dump-globals)\nUsage: (dump-globals)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsage: (random-seq limit count [seed])\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsage: (random-seq limit count [seed])\nUsage: (char-whitespace? char) -&gt; t/nil\nUsage: (char-lower char) -&gt; char\nUsage: (char-upper char) -&gt; char\nUsage: (char-whitespace? char) -&gt; t/nil\nUsage: (char-lower char) -&gt; char\nUsage: (char-upper char) -&gt; char\nUsage: (str-append string1 string2) -&gt; string\nUsage: (str-bytes string) -&gt; int\nUsage: (str-cat-list join-str sequence) -&gt; string\nUsage: (str-lower string) -&gt; string\nUsage: (str-ltrim string) -&gt; string\nUsage: (str-rsplit pattern string) -&gt; list\nUsage: (str-rsplitn n split-pattern string) -&gt; list\nUsage: (str-rtrim string) -&gt; string\nUsage: (str-splitn n split-pattern string) -&gt; vector\nUsage: (str-sub string start [length]) -&gt; string\nUsage: (str-upper string) -&gt; string\nUsage: (-&gt;float ?float) -&gt; float\nUsage: (-&gt;int ?int) -&gt; int\nUsage: (str-append string1 string2) -&gt; string\nUsage: (str-bytes string) -&gt; int\nUsage: (str-cat-list join-str sequence) -&gt; string\nUsage: (str-lower string) -&gt; string\nUsage: (str-ltrim string) -&gt; string\nUsage: (str-rsplit pattern string) -&gt; list\nUsage: (str-rsplitn n split-pattern string) -&gt; list\nUsage: (str-rtrim string) -&gt; string\nUsage: (str-splitn n split-pattern string) -&gt; vector\nUsage: (str-sub string start [length]) -&gt; string\nUsage: (str-upper string) -&gt; string\nUsage: (-&gt;float ?float) -&gt; float\nUsage: (-&gt;int ?int) -&gt; int")