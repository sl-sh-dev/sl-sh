(with-ns iter

#%
Helper to create an iterator.  Will make sure it has the correct
property set.

Section: iterator

Example:
%#
(defmacro mk-iter (& body)
    `(let (iter (fn () ~@body))
        (set-prop iter :is-iter #t)
        iter))

#%
Iterator that wraps a vector.

Section: iterator

Example:
(import iter)
(let (test-vec-iter (vec-iter [1 2 3]))
    (test::assert-equal 1 (test-vec-iter))
    (test::assert-equal 2 (test-vec-iter))
    (test::assert-equal 3 (test-vec-iter))
    (test::assert-equal :*iter-empty* (test-vec-iter))
    (set! test-vec-iter (vec-iter (vec)))
    (test::assert-equal :*iter-empty* (test-vec-iter)))
%#
(defn vec-iter (v)
    (let (idx 0, vlen (len v))
        (mk-iter (if (< idx vlen) (let (tmp idx) (inc! idx) v.~tmp) :*iter-empty*))))

#%
Iterator produces a vector in reverse.

Section: iterator

Example:
(import iter)
(let (test-vec-iter (vec-iter-rev [1 2 3]))
    (test::assert-equal 3 (test-vec-iter))
    (test::assert-equal 2 (test-vec-iter))
    (test::assert-equal 1 (test-vec-iter))
    (test::assert-equal :*iter-empty* (test-vec-iter))
    (set! test-vec-iter (vec-iter-rev (vec)))
    (test::assert-equal :*iter-empty* (test-vec-iter)))
%#
(defn vec-iter-rev (v)
    (let (idx (len v))
        (mk-iter (if (> idx 0) (do (dec! idx) v.~idx) :*iter-empty*))))

#%
Return a pair of iterators, one forward and one reverse for a vector.
The two iterators will not overlap (i.e. the forward and reverse will never
produce the same items).

Section: iterator

Example:
(import iter)
(let ([fwd-iter, rev-iter] (vec-iter-pair [1 2 3]))
    (test::assert-equal 1 (fwd-iter))
    (test::assert-equal 3 (rev-iter))
    (test::assert-equal 2 (fwd-iter))
    (test::assert-equal :*iter-empty* (rev-iter))
    (test::assert-equal :*iter-empty* (fwd-iter)))
(let ([fwd-iter, rev-iter] (vec-iter-pair (vec)))
    (test::assert-equal :*iter-empty* (fwd-iter))
    (test::assert-equal :*iter-empty* (rev-iter)))
%#
(defn vec-iter-pair (v)
    (let (fidx 0, bidx (len v))
        (cons
            (mk-iter (if (< fidx bidx) (let (tmp fidx) (inc! fidx) v.~tmp) :*iter-empty*))
            (mk-iter (if (> bidx fidx) (do (dec! bidx) v.~bidx) :*iter-empty*)))))

#%
Iterator that wraps a list.

Section: iterator

Example:
(import iter)
(let (test-list-iter (list-iter '(1 2 3)))
    (test::assert-equal 1 (test-list-iter))
    (test::assert-equal 2 (test-list-iter))
    (test::assert-equal 3 (test-list-iter))
    (test::assert-equal :*iter-empty* (test-list-iter))
    (set! test-list-iter (list-iter '()))
    (test::assert-equal :*iter-empty* (test-list-iter)))
%#
(defn list-iter (l)
    (mk-iter (if l (let (val (car l)) (set! l (cdr l)) val) :*iter-empty*)))

#%
Iterator that wraps a file.  Each call produces the next line (with
trailing newline).

Section: iterator

Example:
(import iter)
(with-temp-file (fn (file-name)
    (let (tst-file (fopen file-name :create :truncate))
        (defer (fclose tst-file))
        (fprn tst-file "line 1")
        (fprn tst-file "line 2")
        (fprn tst-file "line 3")
        (fpr tst-file "line 4"))
    (let (tst-file (fopen file-name), test-iter (file-iter tst-file))
        (defer (fclose tst-file))
        (test::assert-equal "line 1\\n" (test-iter))
        (test::assert-equal "line 2\\n" (test-iter))
        (test::assert-equal "line 3\\n" (test-iter))
        (test::assert-equal "line 4" (test-iter))
        (test::assert-equal :*iter-empty* (test-iter)))))
%#
(defn file-iter (f)
    (mk-iter (let (line (read-line f))(if line line :*iter-empty*))))

#%
Iterator that wraps a string.  Each element is the next character.

Section: iterator

Example:
(import iter)
(let (test-string-iter (string-iter "123"))
    (test::assert-equal \\1 (test-string-iter))
    (test::assert-equal \\2 (test-string-iter))
    (test::assert-equal \\3 (test-string-iter))
    (test::assert-equal :*iter-empty* (test-string-iter)))
%#
(defn string-iter (s)
    (let (idx 0, slen (len s))
        (mk-iter (if (< idx slen) (let (tmp idx) (inc! idx) s.~tmp) :*iter-empty*))))

#%
Return true if thing is an iterator, false otherwise.

Section: iterator

Example:
(import iter)
(test::assert-true (iter? (list-iter '(1 2 3))))
(test::assert-false (iter? '(1 2 3)))
%#
(defn iter? (test)
    (if (get-prop test :is-iter) #t #f))

#%
Iterator that wraps and returns a single object once.

Section: iterator

Example:
(import iter)
(let (test-iter (once-iter 3))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal :*iter-empty* (test-iter))
    (set! test-iter (once-iter "iter"))
    (test::assert-equal "iter" (test-iter))
    (test::assert-equal :*iter-empty* (test-iter)))
%#
(defn once-iter (i)
    (mk-iter (let (val i) (set! i :*iter-empty*) val)))

#%
Iterator that wraps and returns a single object on each call.

Section: iterator

Example:
(import iter)
(let (test-iter (repeat-iter 3))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal 3 (test-iter))
    (set! test-iter (repeat-iter "iter"))
    (test::assert-equal "iter" (test-iter))
    (test::assert-equal "iter" (test-iter))
    (test::assert-equal "iter" (test-iter))
    (test::assert-equal "iter" (test-iter))
    (test::assert-equal "iter" (test-iter)))
%#
(defn repeat-iter (i)
    (mk-iter i))

#%
Return thing as an iterator if possible (if it is an iterator just return thing).

Section: iterator

Example:
(import iter)
(test::assert-true (iter? (iter '(1 2 3))))
(test::assert-true (iter? (iter [1 2 3])))
(test::assert-true (iter? (iter "abc")))
(test::assert-true (iter? (iter (iter '(1 2 3)))))
%#
(defn iter (thing)
  (if (iter? thing)
        thing
      (list? thing)
        (list-iter thing)
      (vec? thing)
        (vec-iter thing)
      (string? thing)
        (string-iter thing)
      (io? thing)
        (file-iter thing)
      (err "iter: requires a list, vector, string, file or existing iterator")))

#%
Return thing as an iterator if possible (if it is an iterator just return thing).
If not possible then wrap thing in a once iter and return that.

Section: iterator

Example:
(import iter)
(test::assert-true (iter? (iter-or-single '(1 2 3))))
(test::assert-true (iter? (iter-or-single [1 2 3])))
(test::assert-true (iter? (iter-or-single "abc")))
(test::assert-true (iter? (iter-or-single (iter '(1 2 3)))))
(test::assert-true (iter? (iter-or-single 1)))
(test::assert-true (iter? (iter-or-single \\A)))
%#
(defn iter-or-single (thing)
  (if (iter? thing)
        thing
      (list? thing)
        (list-iter thing)
      (vec? thing)
        (vec-iter thing)
      (string? thing)
        (string-iter thing)
      (io? thing)
        (file-iter thing)
      (once-iter thing)))

#%
Iterator that generates numbers within a range.

Section: iterator

Example:
(import iter)
(let (test-iter (range 3 6))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal 4 (test-iter))
    (test::assert-equal 5 (test-iter))
    (test::assert-equal :*iter-empty* (test-iter)))
%#
(defn range (start end)
    (mk-iter (if (< start end) (let (tmp start) (inc! start) tmp) :*iter-empty*)))

#%
Iterator that wraps an iterator and generates pairs of current index and value.
Index is 0 based by default, takes an optional second parameter with the start
index.

Section: iterator

Example:
(import iter)
(let (test-iter (enumerate (vec-iter [:a :b :c])))
    (let ([i v] (test-iter)) (test::assert-equal 0 i) (test::assert-equal :a v))
    (let ([i v] (test-iter)) (test::assert-equal 1 i) (test::assert-equal :b v))
    (let ([i v] (test-iter)) (test::assert-equal 2 i) (test::assert-equal :c v))
    (test::assert-equal :*iter-empty* (test-iter)))
(let (test-iter (enumerate (vec-iter [:a :b :c]) 5))
    (let ([i v] (test-iter)) (test::assert-equal 5 i) (test::assert-equal :a v))
    (let ([i v] (test-iter)) (test::assert-equal 6 i) (test::assert-equal :b v))
    (let ([i v] (test-iter)) (test::assert-equal 7 i) (test::assert-equal :c v))
    (test::assert-equal :*iter-empty* (test-iter)))
%#
(defn enumerate (iter % start := 0)
    (let (idx start)
    (mk-iter
        (let (val (iter))
            (if (identical? val :*iter-empty*)
                :*iter-empty*
                (let (tidx idx) (inc! idx)(cons tidx val)))))))

#%
Loops over each element in an iterator.
The bind parameter is bound to the current element of items and is accessible
in body. Body is evaluated a number of times equal to the items in the iterator.

Section: iterator

Example:
(import iter)
(let (i 0)
    (for x in (range 0 11) (set! i (+ 1 i)))
    (test::assert-equal 11 i))
(let (v [:a :b :c], iter (enumerate (vec-iter v)))
    (for [idx, val] in iter (test::assert-equal v.~idx val)))
%#
(defmacro for (bind in items & body)
    (if (not (= in 'in)) (err "Invalid for: (for [i] in [iterator] (body))"))
    (let (i-name (gensym), actual-bind (gensym))
    `(let-while (~i-name ~items)(~actual-bind (~i-name))
                (not (identical? ~actual-bind :*iter-empty*))
        ; This let allows destructure bindings to work correctly (combined with actual-bind).
        (let (~bind ~actual-bind) ~@body))))

#%
Iterator that applies a lambda to each element of another iterator- is lazy.

Section: iterator

Example:
(import iter)
(let (test-map-iter (map (list-iter '(1 2 3)) (fn (x) (* x 2))))
    (test::assert-equal 2 (test-map-iter))
    (test::assert-equal 4 (test-map-iter))
    (test::assert-equal 6 (test-map-iter))
    (test::assert-equal :*iter-empty* (test-map-iter)))
%#
(defn map (i lambda)
    (mk-iter (let (val (i)) (if (identical? val :*iter-empty*) :*iter-empty* (lambda val)))))

#%
Returns a filter-iter around iter.
Iterator that applies a lambda to each element to determine if is returned- is lazy.

Section: iterator

Example:
(let (test-iter (iter::filter (iter::vec-iter [1 2 3]) (fn (x) (not (= x 2)))))
    (test::assert-equal 1 (test-iter))
    (test::assert-equal 3 (test-iter))
    (test::assert-equal :*iter-empty* (test-iter)))
%#
(defn filter (iter lambda)
    (mk-iter (let (val (iter)) (while (and (not (identical? val :*iter-empty*))(not (lambda val))) (set! val (iter))) val)))


#%
reduce is used to amalgamate an iterator and an initial value,
according to the reducing function provided. The reducing-fcn should be a function
of two arguments. In the first iteration of reduce, the init-val will be used as
the first argument to the reducing-fcn and (iter) will be used as the
second argument. For all subsequent iterations, The result from the previous
application of the reducing-fcn will be used as the first argument to the
reducing-fcn and the second argument will be the next item in the collection
when the collection is empty reduce will return the amalgamated result.

Section: iterator

Example:

(import iter)
(test::assert-true (= 15 (iter::reduce (iter::vec-iter [1 2 3 4 5]) 0 +)))
(test::assert-true (= 16 (iter::reduce (iter::vec-iter [1 2 3 4 5]) 1 +)))
(test::assert-true (= \"one hoopy frood\" (iter::reduce (iter::vec-iter ["one " "hoopy " "frood"]) "" str)))
%#
(defn reduce (iter acc reducing-fn)
    ; Use apply so we can seamlessly handle compiled forms (like +, -, etc).
    ; Currently they won't work without apply if passed in as the reducing-fn.
    (for val in iter (set! acc (apply reducing-fn acc val nil)))
    acc))
