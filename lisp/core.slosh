#%

True if the expression is nil, false otherwise

Section: type

Example:
(test::assert-true (nil? ()))
(test::assert-true (nil? '()))
(test::assert-true (nil? nil))
(test::assert-true (nil? (list)))
(test::assert-false (nil? #f))
%#
(def nil? (fn (v) (identical? (type v) :Nil)))

#%
Usage: (pair? expression)

True if the expression is a pair, false otherwise.

Section: type

Example:
(test::assert-true (pair? '(1 . 2)) "reader macro")
(test::assert-true (pair? (cons 1 2)) "cons")
(test::assert-true (pair? '(1 2)))
(test::assert-false (pair? 1))
(test::assert-false (pair? [1 2 3]))
(test::assert-false (pair? (vec)))
%#
(def pair? (fn (v) (identical? (type v) :Pair)))

#%
Usage: (string? expression)

True if the expression is a string, false otherwise.

Section: type

Example:
(test::assert-true (string? "string"))
(test::assert-false (string? 1))
%#
(def string? (fn (v) (identical? (type v) :String)))

#%
Usage: (symbol? expression)

True if the expression is a symbol, false otherwise.

Section: type

Example:
(test::assert-true (symbol? 'symbol))
(test::assert-false (symbol? 1))
%#
(def symbol? (fn (v) (identical? (type v) :Symbol)))

#%
Usage: (vec? expression)

True if the expression is a vector, false otherwise.

Section: type

Example:
(test::assert-true (vec? [1 2 3]) "reader macro")
(test::assert-true (vec? (make-vec)) "make-vec")
(test::assert-true (vec? (vec 1 2 3)) "vec")
(test::assert-false (vec? 1))
(test::assert-false (vec? '(1 2 3)))
(test::assert-false (vec? (list)))
%#
(def vec? (fn (v) (identical? (type v) :Vector)))

#%
Usage: (list? expression)

True if the expression is a list, false otherwise.

Section: type

Example:
(test::assert-true (list? '(1 2 3)) "reader macro")
(test::assert-true (list? (list 1 2 3)) "list")
(test::assert-false (list? 1))
(test::assert-false (list? [1 2 3]))
(test::assert-false (list? []))
(test::assert-false (list? '(1 . 2)))
%#
(def list? (fn (v) (if (or (nil? v)(pair? v))(if (nil? (cdr v)) #t (recur (cdr v))) #f)))

#%
Usage: (seq? expression)

True if expression is a list or vector, false otherwise.

Section: type

Example:
(test::assert-true (seq? '(1 2 3)))
(test::assert-true (seq? [1 2 3]))
(test::assert-true (seq? []))
(test::assert-false (seq? "aaa"))
(test::assert-false (seq? 1))
%#
(def seq? (fn (v) (or (pair? v)(vec? v))))

#%
Usage (empty? s)

Section: collection

Return false if length of s is 0, true otherwise.

Example:
(test::assert-true (empty? nil))
(test::assert-true (empty? []))
(test::assert-false (empty? [1]))
%#
(def empty? (fn (v) (= (len v) 0)))

#%
Usage (not-empty? s)

Section: collection

Return true if length of s is not 0, false otherwise.

Example:
(test::assert-false (empty? nil))
(test::assert-false (empty? []))
(test::assert-true (empty? [1]))
%#
(def not-empty? (fn (v) (> (len v) 0)))

#%
Usage: (callable? to-test)

Section: type

True if the to-test can be called as the first argument in an expression.
%#
(def callable? (fn (v) (let (t (type v))(or (identical? t :Lambda)
                                             (identical? t :Continuation)
                                             (identical? t :Special)
                                             (identical? t :Builtin)
                                             (identical? t :Map)
                                             (identical? t :Vector)
                                             (identical? t :Pair)))))

#%
Usage: (io? expression)

True if the expression is an IO object (file), false otherwise.

Section: type

Example:
(def iotst (fopen "/tmp/iotst" :create))
(test::assert-true (io? iotst))
(test::assert-false (io? 1))
(test::assert-false (io? '(1 2 3)))
(test::assert-false (io? (list)))
%#
(def io? (fn (v) (identical? (type v) :Io)))

#%
Usage: (defmacro name doc_string? argument_list body)

Create a macro and bind it to a symbol in the current scope.

Section: core

Example:
(defmacro test-mac (x) `(inc! ~x))
(def test-mac-x 2)
(test-mac test-mac-x)
(test::assert-equal 3 test-mac-x)
(defmacro test-mac (x) `(set! ~x 15))
(test-mac test-mac-x)
(test::assert-equal 15 test-mac-x)
%#
(comp-time (def defmacro
  (macro (name args & body)
      `(comp-time (def ~name (macro ~args ~@body))nil))) nil)

#%
Usage: (get-error exp0 ... expN) -> pair

Evaluate each form (like do) but on error return (:error msg backtrace) instead of aborting.
On success return (:ok . expN-result).

If there is no error will return the value of the last expression as the cdr of
the pair.  Always returns a pair with the first value either being :ok or :error.

Section: core

Example:
(let (get-error-t1 (get-error (err (mk-err :string (str "Some Error")))))
    (test::assert-equal :error (car get-error-t1))
    (test::assert-equal "error [string]: \\"Some Error\\"" (str (cdr get-error-t1))))
(test::assert-equal "Some String" (get-error \"Some String\"))
(test::assert-equal "Some Other String" (get-error (let (test-get-error \"Some \") (str test-get-error \"Other String\"))))
%#
(defmacro get-error (& body)
    (let (old-error (gensym))
    `(let (~old-error (on-raised-error nil))
        (defer (on-raised-error ~old-error))
        (call/cc (fn (k)
                     (on-raised-error k)
                     ~@body)))))


(defmacro block (& body)
    `(call/cc (fn (return-from) ~@body)))

#%
Define a named function in the current namespace.

Section: core

Example:
(defn defn-test (x y) (+ x y))
(test::assert-equal 5 (defn-test 2 3))
(defn defn-test (x y) (set! x (* x 2)) (+ x y))
(test::assert-equal 7 (defn-test 2 3))
(defn defn-test (x y) nil)
(test::assert-false (defn-test 2 3))
(defn defn-test (x y) #t)
(test::assert-true (defn-test 2 3))
%#
(defmacro defn
    (name args & body)
        `(def ~name (fn ~args ~@body)))

#%
Binds bindings to parameters in body. Use recur with desired bindings for
subsequent iteration.
Within the loop the lambda 'break' will end the loop, break can take an option
argument that is what the loop produces (nil if no argument).

Section: core

Example:
(def tot 0)
(loop (idx) (3) (do
    (set! tot (+ tot 1))
    (if (> idx 1) (recur (- idx 1)))))
(test::assert-equal 3 tot)
(def tot 0)
(loop (idx) (0)
    (set! tot (+ tot 1))
    (when (not (= idx 2))
        (recur (+ idx 1))))
(test::assert-equal 3 tot)
(test::assert-equal 11 (loop (idx) (0)
    (if (= idx 2) (break 11))
    (recur (+ idx 1))))
(test::assert-false (loop (idx) (0)
    (if (= idx 2) (break nil))
    (recur (+ idx 1))))
(test::assert-error (loop (idx) (0)
    (if (= idx 2) (break 1 3))
    (recur (+ idx 1))))
%#
(defmacro loop
  (params bindings & body)
    `(call/cc (fn (break) ((fn ~params ~@body) ~@bindings))))

#%
Print the documentation for provided symbol.

Section: core
%#
(defmacro doc (sym)
    (let (docs `(get-prop ~sym :doc-string)
         has-usage (str-starts-with "Usage:" (str-trim (str docs))))
        (do
        (if has-usage
          `(prn ~docs)
          `(prn (usage ~sym) "\n\n" ~docs)))))

#%
Evaluate body a number of times equal to times' numerical value.

Section: core

Example:
(def i 0)
(dotimes 11 (set! i (+ 1 i)))
(test::assert-equal 11 i)
%#
(defmacro dotimes
    (times & body)
    (let (i-name (gensym))
    `(let (~i-name 0)
        (while (< ~i-name ~times)
            ~@body
            (inc! ~i-name)))))

#%
Evaluate body a number of times equal to times' numerical value. Includes an
incrementing reference binding, idx-bind, accessible in body.

Section: core

Example:
(def i 0)
(def i-tot 0)
(dotimes-i idx 11 (do (set! i-tot (+ idx i-tot))(set! i (+ 1 i))))
(test::assert-equal 11 i)
(test::assert-equal 55 i-tot)
%#
(defmacro dotimes-i
    (idx-bind times & body)
    `(let (~idx-bind 0)
        (while (< ~idx-bind ~times)
            ~@body
            (inc! ~idx-bind))))


#%
Usage: (when provided-condition if-true)

when is a convenience function used to check a form, provided-condition,
and run some form, if-true, if provided-condition evaluates to true.

Section: conditional

Example:

(test::assert-true (when #t #t))
(test::assert-false (when #t nil))
(test::assert-false (when nil nil))
%#
(defmacro when
    (provided-condition if-true)
    `(if ~provided-condition ~if-true))

#%
Usage: (dyn key value expression) -> result_of_expression

Creates a dynamic binding for key, assigns value to it and evals expression under it.
Note that if key must be a symbol and is not evaluated.

The binding is gone once the dyn form ends. This is basically a set! on the
binding in an unwind protect to reset it when done.  When used on a global will
set the first binding found and reset it when done.
Calls to dyn can be nested and previous dynamic values will
be restored as interior dyn's exit.

Section: core

Example:
(def *dyn-test* 1)
(defn test-dyn-fn (val) (str *dyn-test* val))
(def out (dyn *dyn-test* 11 (test-dyn-fn 101)))
(test::assert-equal "11101" (str out))
;; when file handling works
;;(defn test-dyn-fn () (prn \"Print dyn out\"))
;;(dyn *stdout* (open \"/tmp/sl-sh.dyn.test\" :create :truncate) (test-dyn-fn))
;;(test::assert-equal \"Print dyn out\" (read-line (open \"/tmp/sl-sh.dyn.test\" :read)))
%#
(defmacro dyn
  (key value & expression)
  (let (old-val (gensym))
    `(let (~old-val ~key)
      (defer (set! ~key ~old-val))
      (do (set! ~key ~value) ~@expression))))

#%
Identity function.

Section: core

Example:

(test::assert-equal 0 (identity 0))
%#
(defn identity (x) x)

#%
Produces the last element in a list or vector.  Nil if the list/vector is empty.

Section: sequence

Example:
(test::assert-equal 3 (last '(1 2 3)))
(test::assert-equal 3 (last [1 2 3]))
(test::assert-equal nil (last '()))
(test::assert-equal nil (last nil))
(test::assert-equal nil (last []))
%#
(defn last
  (obj)

  (let (last-list (fn (obj)
                       (if (nil? (cdr obj)) (car obj)
                           (recur (cdr obj)))))

    (if (vec? obj) (if (> (len obj) 0) (let (i (- (len obj) 1)) obj.~i) nil)
        (list? obj) (last-list obj)
        (err "Not a vector or list"))))

#%
Produces the provided list minus the last element.  Nil if the list is empty or one element.

Section: sequence

Example:
(test::assert-equal '(1 2) (butlast '(1 2 3)))
(test::assert-equal [1 2] (butlast [1 2 3]))
(test::assert-equal nil (butlast '(1)))
(test::assert-equal [] (butlast [1]))
(test::assert-equal nil (butlast '()))
(test::assert-equal nil (butlast nil))
(test::assert-equal nil (butlast []))
%#
(def butlast nil) ; predeclare and assign butlast to avoid a warning when used in butlast declaration.
(defn butlast
  (obj)
  (if (vec? obj) (if (> (len obj) 0) (vec-slice obj 0 (- (len obj) 1)) nil)
      (list? obj)
      (let (new-link (cons nil nil))
        (if (nil? (cdr obj))
            (set! new-link nil)
            (set! new-link (cons (car obj) (butlast (cdr obj)))))
        new-link)
      (err "Not a vector or list")))

#%
Produces the first element of the provided list or vector.  Nil if the
list/vector is nil/empty.  Note this is like car that works for lists and
vectors.


Section: sequence

Example:
(test::assert-equal 1 (first '(1 2 3)))
(test::assert-equal 1 (first [1 2 3]))
(test::assert-equal nil (first '()))
(test::assert-equal nil (first nil))
(test::assert-equal [] (first []))
%#
(defn first
  (obj)
  (if (vec? obj) (if (empty? obj) obj obj.0)
      (list? obj) (car obj)
      (err (str "Not a vector or list, " (type obj)))))

#%
Produces the provided list or vector minus the first element.  Nil if the
list/vector is nil/empty or one element.  Note this is like cdr that works for
lists and vectors.  This calls vec-slice to create a new vector when called with
a vector (i.e. is much more efficient with lists).

Section: sequence


Example:
(test::assert-equal '(2 3) (rest '(1 2 3)))
(test::assert-equal [2 3] (rest [1 2 3]))
(test::assert-equal nil (rest '(1)))
(test::assert-equal [] (rest [1]))
(test::assert-equal nil (rest '()))
(test::assert-equal nil (rest nil))
(test::assert-equal [] (rest []))
%#
(defn rest
  (obj)
  (if (vec? obj) (if (empty? obj) obj (vec-slice obj 1))
      (list? obj) (cdr obj)
      (err "Not a vector or list")))


#%
Loops over each element in a sequence.  Simple version that works with lists and
vectors, use iterator::for in general.

Section: sequence

Example:
(def i 0)
(seq-for x in '(1 2 3 4 5 6) (set! i (+ 1 i)))
(test::assert-equal 6 i)
%#
(defmacro seq-for
  (bind in items & body)
  (if (not (identical? in 'in)) (err "Invalid seq-for: (for [i] in [sequence] (body))"))
    (let (lst (gensym))
    `(let-while (~lst ~items) (~bind (first ~lst), done (empty? ~lst), ~lst (rest ~lst)) (not done) ~@body)))

#%
Usage: (match condition (value form*)*) -> result

Evaluate condition and look for matching value in each branch of type
(value form*). Form(s) will be wrapped in an implicit do. Use nil to take
action if no match (encouraged!).

Section: conditional

Example:

(defn select-option (a)
    (match a (1 \"opt-one\")
             (2 (set! b 5) \"opt-two\")
             (3 (str \"opt\" \"-three\"))))
(defn select-option-def (a)
    (match a (1 \"opt-one\")
             (2 \"opt-two\")
             (3 (str \"opt\" \"-three\"))
             (nil \"default\")))
(def b 0)
(test::assert-equal b 0)
(test::assert-equal \"opt-one\" (select-option 1))
(test::assert-equal \"opt-two\" (select-option 2))
(test::assert-equal b 5)
(test::assert-equal \"opt-three\" (select-option 3))
(test::assert-equal #f (select-option 4))
(test::assert-equal \"opt-one\" (select-option-def 1))
(test::assert-equal \"opt-two\" (select-option-def 2))
(test::assert-equal \"opt-three\" (select-option-def 3))
(test::assert-equal \"default\" (select-option-def 4))
%#
(defmacro match
  (condition & branches)
  ((fn ()
       (let (make-action (fn (action)
                              (if (seq? action)
                                  `(do ~@action)
                                  `action))
             make-cond (fn (condition val action others)
                            (if (nil? val) (make-action action)
                                (if (empty? others) `((= ~condition ~val) ~(make-action action))
                                    `((= ~condition ~val) ~(make-action action) ~@(make-cond condition (first (first others)) (rest (first others)) (rest others))))))
             cond-name condition)
         `(if ~@(make-cond cond-name (first (first branches)) (rest (first branches)) (rest branches)))))))


#%
Usage: (cond ((test form*)*) -> result

Evaluate each test in order.  If it is true then evaluate the form(s) in an
implicit do and return the result.  Stop evaluating at the first true test.
Return nil if no conditions are true.

Section: conditional

Example:

(def b 0)
(defn select-option (a)
    (cond ((= a 1) \"opt-one\")
          ((= a 2) (set! b 5) \"opt-two\")
          ((= a 3) (str \"opt\" \"-three\"))))
(defn select-option-def (a)
    (cond ((= a 1) \"opt-one\")
          ((= a 2) \"opt-two\")
          ((= a 3) (str \"opt\" \"-three\"))
          (#t \"default\")))
(test::assert-equal \"opt-one\" (select-option 1))
(test::assert-equal b 0)
(test::assert-equal \"opt-two\" (select-option 2))
(test::assert-equal b 5)
(test::assert-equal \"opt-three\" (select-option 3))
(test::assert-equal nil (select-option 4))
(test::assert-equal \"opt-one\" (select-option-def 1))
(test::assert-equal \"opt-two\" (select-option-def 2))
(test::assert-equal \"opt-three\" (select-option-def 3))
(test::assert-equal \"default\" (select-option-def 4))
%#
(defmacro cond
  (& branches)
  ((fn ()
       (let (make-action (fn (action)
                              (if (seq? action)
                                  `(do ~@action)
                                  `action))
             make-cond (fn (condition action others)
                            (if (empty? others)
                                `(~condition ~(make-action action) nil)
                                `(~condition ~(make-action action) ~@(make-cond (first (first others)) (rest (first others)) (rest others))))))
         `(if ~@(make-cond (first (first branches)) (rest (first branches)) (rest branches)))))))

#%
Usage: (when provided-condition if-true)

when is a convenience function used to check a form, provided-condition,
and run some form, if-true, if provided-condition evaluates to true.

Section: conditional

Example:
(test::assert-true (when #t #t))
(test::assert-false (when #t nil))
(test::assert-false (when nil nil))
%#

(defmacro when
    (provided-condition if-true)
    `(if ~provided-condition ~if-true))

#%
Usage: (with-temp-file (fn (x) (println "given temp file:" x)) ["optional-prefix" "optional-suffix" length])

Takes a function that accepts a temporary file. This file will be removed when the provided function
is finished executing. Also accepts an optional prefix, an optional suffix, and an optional
length for the random number of characters in the temporary file created. Defaults to prefix of
".tmp", no suffix, and five random characters.

Section: file

Example:
(def fp nil)
(with-temp-file (fn (tmp-file)
    (let (a-file (fopen tmp-file :create :truncate))
        (test::assert-true (fs-exists? tmp-file))
        (set! fp tmp-file)
        (fclose a-file))))
(test::assert-false (nil? fp))
(test::assert-false (fs-exists? fp))

(with-temp-file
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix")))
    "some-prefix")

(with-temp-file
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix"))
        (test::assert-true (str-contains tmp "some-suffix")))
    "some-prefix"
    "some-suffix")

(with-temp-file
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix"))
        (test::assert-true (str-contains tmp "some-suffix"))
        (test::assert-equal (len "some-prefix0123456789some-suffix") (len (fs-base tmp))))
    "some-prefix"
    "some-suffix"
    10)
%#
(defn with-temp-file (func & args)
    (let (file-name (apply get-temp-file (temp-dir) args))
        (defer (fs-rm file-name))
        (func file-name)))

#%
Usage: (with-temp (fn (x) (println "given temp dir:" x)) ["optional-prefix" "optional-suffix" length])

Takes a function that accepts a temporary directory. This directory will be recursively removed
when the provided function is finished executing. Also accepts an optional prefix, an optional
suffix, and an optional length for the random number of characters in the temporary directory
created. Defaults to prefix of \".tmp\", no suffix, and five random characters.

Section: file

Example:
(def fp nil)
(with-temp (fn (tmp-dir)
    (let (tmp-file (str tmp-dir "/sl-sh-tmp-file.txt")
         a-file (fopen tmp-file :create :truncate))
        (test::assert-true (fs-exists? tmp-file))
        (set! fp tmp-file)
        (fclose a-file))))
(test::assert-false (nil? fp))
(test::assert-false (fs-exists? fp))

(with-temp
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix")))
    "some-prefix")

(with-temp
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix"))
        (test::assert-true (str-contains tmp "some-suffix")))
    "some-prefix"
    "some-suffix")

(with-temp
    (fn (tmp)
        (test::assert-true (str-contains tmp "some-prefix"))
        (test::assert-true (str-contains tmp "some-suffix"))
        (test::assert-equal (len "some-prefix0123456789some-suffix") (len (fs-base tmp))))
    "some-prefix"
    "some-suffix"
    10)
%#
(defn with-temp (func & args)
    (let (dir (apply get-temp (temp-dir) args))
        (defer (fs-rm dir))
        (func dir)))

#%
Usage: (identity arg)

Identity function.

Section: core

Example:

(test::assert-equal 0 (identity 0))
%#
(defn identity (x) x)

#%
Usage: (not= arg1 arg2)

Test if two values are not equal using `=`

Section: core

Example:
(test::assert-true (not= 0 1))
(test::assert-true (not= 1 1.0))
(test::assert-false (not= 2 2))
(test::assert-false (not= 0.0 -0.0))
%#
(defmacro not= (expected-val right-val)
    `(not (= ~expected-val ~right-val))
)

#%
Usage: (not== arg1 arg2)

Test if two values are not numerically equal using `==`

Section: core

Example:
(test::assert-true (not== 0 1))
(test::assert-false (not== 1 1.0))
(test::assert-false (not== 0.0 -0.0))
(test::assert-false (not== 2 2))
%#
(defmacro not== (expected-val right-val)
    `(not (== ~expected-val ~right-val))
)

#%
Replaces all instances of old-item in lst with new-item. If last argument
passed in is keyword :first only the first instance of old-item will be
replaced.

Section: core

Example:
(let (lst (list 1 2 3 4 5))
    (test::assert-equal (list 1 2 2 4 5) (nsubstitute! lst 3 2))
    (test::assert-equal (list 1 2 2 4 5) lst)
    (test::assert-equal (list 1 3 2 4 5) (nsubstitute! lst 2 3 :first)))
%#
(defn nsubstitute!
    (lst old-item new-item & mods)
    (let (early-return (in? mods :first))
      (loop (idx items) (0 lst)
        (if (empty? items)
            lst
            (do
              (when (= (car items) old-item)
                  (do
                    (set! lst.~idx new-item)
                    (when early-return (break lst))))
              (recur (+ 1 idx) (cdr items)))))
           lst))

 #%
 Replaces all instances of old-item in copy of lst with new-item.  If last
 argument passed in is keyword :first only the first instance of old-item will be
 replaced.

 Section: core

 Example:

 (let (lst (list 1 2 3 4 3)
      olst (list 1 2 3 4 3)
       lst2 (list 1 2 3 3 3 4 5)
      olst2 (list 1 2 3 3 3 4 5))
     (test::assert-equal (list 1 2 10 4 10) (substitute lst 3 10))
     (test::assert-equal (list 1 2 10 4 3) (substitute lst 3 10 :first))
     (test::assert-equal olst lst)
     (test::assert-equal (list 1 2 4 4 4 4 5) (substitute lst2 3 4))
     (test::assert-equal (list 1 2 4 3 3 4 5) (substitute lst2 3 4 :first))
     (test::assert-equal olst2 lst2))
 %#
  (defmacro substitute (lst old-item new-item & mods)
       `(nsubstitute! (to-list ~lst) ~old-item ~new-item ~@mods))

(load "iterator.slosh")
(load "test.slosh")
