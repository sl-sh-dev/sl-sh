searchState.loadedDescShard("sl_liner", 0, "A readline-like library For more information refer to the …\nA modification performed on a <code>Buffer</code>. These are used for …\nSent after handling a keypress.\nCompleter that can be seeded with a list of prefixes..\nSent in <code>Editor.complete()</code>, before processing the …\nSent before handling a keypress.\nA buffer for text in the line editor.\nPrimary interface to readline-like functionality\nThe core line editor. Displays and provides editing for …\nCompleter with no completions\nEvent has context about the state of the editor and the …\nCompleter for filenames in the current working_dir\nStructure encapsulating command history\nAccept autosuggestion and copy its content into current …\nClears the screen then prints the prompt and current …\nClears out the history.\nClears the prompt prefix. Useful to reflect a keybinding …\nClears the prompt prefix. Useful to reflect a keybinding …\nCheck if the buffer contains pattern. Used to implement …\nReturns a reference to the current buffer being edited. …\nReturns a mutable reference to the current buffer being …\nNone if we’re on the new buffer, else the index of …\nTrack current grapheme offset for terminal cursor\nDeletes the character directly after the cursor. The …\nDeletes every character after the cursor until the end of …\nDeletes every character preceding the cursor until the …\nDeletes the character directly before the cursor, moving …\nDeletes every character from the cursor until the given …\nDeletes every character from the cursor until the given …\nDeletes every character from the cursor until the given …\nDeletes the word preceding the cursor. If …\nDeletes the displayed prompt and buffer, replacing them …\nSame as <code>Context.read_line()</code>, but passes the provided …\nProvides DefaultEditorRules for editor behaviors with …\nGet the history file name.\nReturns the first grapheme of the buffer or None if empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGo through the history and try to find an index (newest to …\nInserts a character directly after the cursor, moving the …\nInserts characters directly after the cursor, moving the …\nInsert contents of register to the right or to the left of …\nInserts a string directly after the cursor, moving the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the history empty\nReturn true if the buffer is empty.\nInterface for Vi and Emacs KeyMaps\nReturns the last grapheme of the buffer or None if empty.\nNumber of items in history.\nLoads the history file from the saved path and appends it …\nLoads the history file from path and appends it to the end …\nMoves the cursor to the left by <code>count</code> characters. The …\nMoves the cursor to the right by <code>count</code> characters. The …\nMoves the cursor to <code>pos</code>. If <code>pos</code> is past the end of the …\nMoves the cursor to the end of the line.\nMoves the cursor to the start of the line.\nMove down (forwards) in history, or to the new buffer if …\nMoves to the end of history (ie. the new buffer).\nMoves to the start of history (ie. the earliest history …\nMove up (backwards) in history.\nCreate new History structure.\nInserts characters from internal register to the right or …\nTakes other buffer, measures its length and prints this …\nUser-defined prompt.\nAdd a command to the history buffer and remove the oldest …\nPush ch onto the end of the buffer.\nAdds a “throwaway” history item.  Any of these will be …\nCreates an <code>Editor</code> and feeds it keypresses from stdin until …\nReturns the number of graphemes removed.\nReturns the graphemes removed. Does not register as an …\nBegin or continue a search through history.  If forward is …\nSet history file name and at the same time load the …\nSet maximal number of buffers in history\nModifies the prompt prefix. Useful to reflect a keybinding …\nModifies the prompt suffix. Useful to reflect a keybinding …\nCheck if the other buffer starts with the same content as …\nAttempts to undo an action on the current buffer.\nYanks every character after the cursor until the end of …\nYanks every character from the cursor until the given …\nYanks every character from the cursor until the given …\nCursor (as in the terminal’s cursor) exposes various …\nRepresents the position of the cursor relative to words in …\nThe cursor is not in contact with any word. Each …\nThe cursor is in the word with the specified index.\nThe cursor is on the left edge of the word with the …\nThe cursor is on the right edge of the word with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the cursor to <code>pos</code>. If <code>pos</code> is past the end of the …\nProvides default editor behavior and provides custom …\nStruct with default newline behavior\nStruct with default word divide behavior\nTrait that implements all editor rule behaviors, a …\nWhen the client inputs the newline character, ‘\\n’, …\nWhen the Editor is trying to place the term cursor it …\nDefault WordDivideRule implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault NewlineRule implementation.\nEmacs keybindings for <code>Editor</code>. This is the default for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVi keybindings for <code>Editor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll alphanumeric characters and _ are considered valid for …\nUser-defined prompt.\nConstructs a static prompt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")