searchState.loadedDescShard("shell", 0, "Shell reader/parser. Parses a string into a shell command. …\nIf path start with HOME then replace with ~.\nTakes a PathBuf, if it contains ~ then replaces it with …\nArg to a command, either a direct string or a sub command …\nA command to run to get the string arg.\nAn individual command with args.\nList of args that will be concatenated to make the arg.\nContains a stack or redirects that can be processed in …\nCommand(s) ready to run with context.\nSingle string arg.\nEnv variable to use to set the arg.\nArgs to the command.\nIterator over the arguments for the command.\nClear the redirect stack.\nCommand name, None if no command name set (args are empty).\nExtend this redir stack with the redirs from other.\nIf fd is Some value then put it at the front of the redir …\nExtend the redirect stack for this command with stdio.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a set of all the ‘internal’ file descriptors …\nReturn a set of all the ‘internal’ file descriptors …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmpty, not even the command is set.\nCreate a new empty redirect stack.\nCreate a new empty command and args.\nProcess the stack in order and setup all the requested …\nProcess redirects.\nPush new Run onto an existing or create a new AND sequence.\nPush a new arg onto the command, the first “arg” is …\nIf fd is Some value then put it at the front of the redir …\nPush a new env var arg onto the command, the first “arg…\nPush new Run onto an existing or create a new OR sequence.\nPush Run onto an existing or create a new pipe sequence.\nPush a new Run onto the Run.  If it is not the first …\nPush a new env var arg onto the command, the first “arg…\nPush new Run onto an existing or create a new sequence.\nIf fd is Some value then put it at the front of the redir …\nIf fd is Some value then put it at the front of the redir …\nIf fd is Some value then put it at the front of the redir …\nIf fd is Some value then put it at the front of the redir …\nPush input data to the redirect stack for fd.\nPush a fd to fd redirect onto the stack. If push_back is …\nPush a fd to fd redirect onto the stack. This is for …\nPush a fd to fd redirect onto the stack.\nPush an input file path to the redirect stack for fd.\nPush an input file path to the redirect stack for fd.\nPush a fd to fd redirect onto the stack. If push_back is …\nPush a fd to fd redirect onto the stack. This is for …\nPush an output file path to the redirect stack for fd.\nSet the stdio redirect stack for this command.\nSet the stdio redirect stack for this command.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJob is done.\nProcess is done, contains the pid and status code.\nProcess had an error, no status code available.  Contains …\nStatus of a Job.\nNew job, not initialized.\nStatus of a process that is part of a job.\nRunning job.\nProcess is running, contains the pid.\nProcess was stopped due to a signal.  Contains the pid and …\nJob is paused in background.\nAdd an alias.\nAdd an already parsed alias.\nAdd pid to list of pids as Running with name. If the pid …\nMove the job for job_num to te background and running …\nClears all the existing aliases.\nMove the job for job_num to te foreground.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an alias.\nFirst tries to fin key in the environment then checks …\nGet the mutable job for job_id if it exists.\nGet the local var key or None if does not exist.\nIs this job running in an interactive shell?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this job is empty (contains no processes).\nMark the job status to done.\nMark the job as running.\nMark the job as stopped.\nCreate a new job with the next job number. Note, this new …\nThe process group id for the job.  Should be equal to the …\nPids with status that make up a job.\nPrint a the alias for name if set.\nPrint all the defined aliases.\nMove the process pid to the done state with status. Will …\nMove the process pid to the error state. Will panic if pid …\nMove the process pid to the signaled state. Will panic if …\nPush job onto the list of jobs.\nCheck any pids in a job by calling wait and updating the …\nRemoves the alias name, return the value if removed..\nRemove the local var key. If key exists returns the …\nRestore terminal settings and put the shell back into the …\nReverse the list of pids in the job.\nSets whether we are interactive or not.\nSet a local var into key. Will overwrite an existing value.\nSet not on a tty.\nSet the stealth flag, if true then do NOT print out when a …\nThe PID of the shell running this job.\nStatus of this job.\nIs this a stealth job (do not report when complete if in …\nA list of commands to run in a pipe as a job.\nSlice of the individual commands in pipe order.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume and produce the inner [‘Run’].\n-c; The maximum size of core files created. RLIMIT_CORE …\n-t: The maximum amount of cpu time in seconds. RLIMIT_CPU\n-d: The maximum size of a process’s data segment. …\n-f: The maximum size of files written by the shell and its …\nTrait to turn a UnixFileDesc into another object (like …\n-k: The maximum number of kqueues that may be allocated. …\n-x: The maximum number of file locks. RLIMIT_LOCKS\n-n: The maximum number of open file descriptors (most …\n-v: The maximum amount of virtual memory available to the …\n-u: The maximum number of processes available to a single …\n-P: The maximum number of pseudoterminals. RLIMIT_NPTS\n-R: The maximum time a real-time process can run before …\n-T: The maximum number of threads. RLIMIT_NPROC (Same as …\n-l: The maximum size that may be locked into memory. …\n-q: The maximum number of bytes in POSIX message queues. …\n-e: The maximum scheduling priority (“nice”). …\nAn OS signal.\nAbstraction for a “platform” (for instance Unix or …\nAbstraction over the various rlimits.\nHolder for setting or getting rlimits (get/setrlimit).\n-m: The maximum resident set size (many systems do not …\n-r: The maximum real-time scheduling priority. …\n-i: The maximum number of pending signals.RLIMIT_SIGPENDING\n-b: The maximum socket buffer size. RLIMIT_SBSIZE …\n-s: The maximum stack size. RLIMIT_STACK\nRaw file descriptor for the target platform.\nProcess ID for the target platform.\nSaved terminal settings.\nReturn the input and output file descriptors for an …\nReturn the input and output file descriptors for an …\nMove the job for job_num to te background and running …\nMove the job for job_num to te background and running …\nClose a raw file descriptor.\nClose a raw Unix file descriptor.\nGet current UID of the process.\nGet current UID of the process.\nDuplicate a raw file descriptor to another file descriptor.\nDuplicate a raw file descriptor to another file descriptor.\nGet effective UID of the process.\nGet effective UID of the process.\nMove the job for job_num to te foreground.\nMove the job for job_num to te foreground.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new instance of Self from the given …\nClears the current umask and returns the previous umask.\nIf terminal is a terminal then get it’s term settings.\nIf terminal is a terminal then get it’s term settings.\nGet the current machines hostname if available.\nGet the current machines hostname if available.\nGet the current PID.\nGet the current PID.\nGrab control of terminal. Used for shell startup.\nGrab control of terminal. Used for shell startup.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf mask_string is a mode string then merge it with umask …\nRestore terminal settings and put the shell back into the …\nRestore terminal settings and put the shell back into the …\nPuts the running process into its own process group. Do …\nPuts the running process into its own process group. Do …\nSet current umask to umask.\nPut terminal in the foreground, loop until this succeeds. …\nPut terminal in the foreground, loop until this succeeds. …\nConvert mode to the octal string umask format.")