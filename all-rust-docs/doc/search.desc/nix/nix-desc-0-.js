searchState.loadedDescShard("nix", 0, "Rust friendly bindings to the various *nix system …\nContains the error value\nNix’s main error type.\nCommon trait used to represent file system paths by many …\nContains the success value\nNix Result Type\nSafe wrappers around errno functions\nfile control options\nFeature tests for OS functionality\nIs the path empty?\nLength of the path in bytes\nCreate master and slave virtual pseudo-terminals (PTYs)\nMostly platform-specific functionality\nSafe wrappers around functions found in libc “unistd.h”…\nExecute a function with this path as a <code>CStr</code>.\nThe sentinel value indicates that a function failed and …\nSets the platform-specific errno to no-error\nReturns the platform-specific value of errno\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current value of errno\nReturns the current raw i32 value of errno\nReturns <code>Ok(value)</code> if it does not contain the sentinel …\nSets the value of errno.\nSets the raw i32 value of errno.\nUsed with <code>faccessat</code>, the checks for accessibility are …\nIf the provided path is an empty string, operate on the …\nDon’t automount the terminal (“basename”) component …\nUsed with <code>linkat</code> to create a link to a symbolic link’s …\nUsed with functions like <code>fstatat</code> to operate on a link …\nFlags that control how the various *at syscalls behave.\nRemoves byte range from a file without leaving a hole.\nIncreases file space by inserting a hole within the file …\nFile size is not changed.\nDeallocates space by creating a hole.\nShared file data extants are made private to the file.\nZeroes space in specified byte range.\nThe file descriptor will automatically be closed during a …\nAdd seals to the file\nDuplicate the provided file descriptor\nDuplicate the provided file descriptor and set the …\nGet the close-on-exec flag associated with the file …\nGet descriptor status flags\nGet the first lock that blocks the lock description\nReturn the capacity of a pipe\nGet seals associated with the file\nDetermine whether it would be possible to create the given …\nAcquire or release an open file description lock\nLike <code>F_OFD_SETLK</code> except that if a conflicting lock is held …\nThe file contents cannot be modified, except via shared …\nThe size of the file cannot be increased.\nPrevents further calls to <code>fcntl()</code> with <code>F_ADD_SEALS</code>.\nThe file cannot be reduced in size.\nThe file contents cannot be modified.\nSet the close-on-exec flag associated with the file …\nSet descriptor status flags\nSet or clear a file segment lock\nLike <code>F_SETLK</code> except that if a shared or exclusive lock is …\nChange the capacity of a pipe\nMode argument flags for fallocate determining operation …\nCommands for use with <code>fcntl</code>.\nAdditional configuration flags for <code>fcntl</code>’s <code>F_SETFD</code>.\nRepresents an owned flock, which unlocks on drop.\nOperations for use with <code>Flock::lock</code>.\nRepresents valid types for flock.\nexclusive file lock\nExclusive lock.  Do not block when locking.\nshared file lock\nShared lock.  Do not block when locking.\nConfiguration options for opened files.\nMask for the access mode of the file.\nOpen the file in append-only mode.\nGenerate a signal when input or output becomes possible.\nCloses the file descriptor once an <code>execve</code> call is made.\nCreate the file if it does not exist.\nTry to minimize cache effects of the I/O for this file.\nIf the specified path isn’t a directory, fail.\nImplicitly follow each <code>write()</code> with an <code>fdatasync()</code>.\nError out if a file was not created.\nSame as <code>O_SYNC</code>.\nAllow files whose sizes can’t be represented in an <code>off_t</code> …\nSame as <code>O_NONBLOCK</code>.\nDo not update the file last access time during <code>read(2)</code>s.\nDon’t attach the device as the process’ controlling …\n<code>open()</code> will fail if the given path is a symbolic link.\nWhen possible, open the file in nonblocking mode.\nObtain a file descriptor for low-level access.\nOnly allow reading.\nAllow both reading and writing.\nSimilar to <code>O_DSYNC</code> but applies to <code>read</code>s instead.\nImplicitly follow each <code>write()</code> with an <code>fsync()</code>.\nCreate an unnamed temporary file.\nTruncate an existing regular file to 0 length if it allows …\nOnly allow writing.\nSpecifies how openat2 should open a pathname.\nThe specified data will not be accessed in the near future.\nThe specified data will only be accessed once and then not …\nRevert to the default data access behavior.\nA hint that file data will be accessed randomly, and …\nThe file data will be accessed sequentially.\nThe specified data will be accessed in the near future.\nThe specific advice provided to <code>posix_fadvise</code>.\nAtomically exchange <code>old_path</code> and <code>new_path</code>.\nDon’t overwrite <code>new_path</code> of the rename.  Return an error …\ncreates a “whiteout” object at the source of the …\nDo not permit the path resolution to succeed if any …\nTreat the directory referred to by dirfd as the root …\nDisallow all magic-link resolution during path resolution. …\nDisallow resolution of symbolic links during path …\nDisallow traversal of mount points during path resolution …\nFlags for use with <code>renameat2</code>.\nPath resolution flags.\nAdditional flags for file sealing, which allows for …\nUnlock file\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nManipulates file space.\nPerform various operations on open file descriptors.\nSet the open flags used to open a file, completely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nObtain a/an flock.\nSet the file mode new files will be created with, …\nCreate a new zero-filled <code>open_how</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nopen or create a file for reading, writing or executing\nopen or create a file for reading, writing or executing\nOpen or create a file for reading, writing or executing.\nAllows a process to describe to the system its data access …\nPre-allocate storage for a range in a file\nRead value of a symbolic link\nRead value of a symbolic link.\nRelock the file.  This can upgrade or downgrade the lock …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nChange the name of a file.\nLike <code>renameat</code>, but with an additional <code>flags</code> argument.\nSet resolve flags, completely overwriting any existing …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove the lock and return the object wrapped within.\nCheck if the OS supports atomic close-on-exec for sockets\nThis is the child process of the underlying fork.\nA successful result of <code>forkpty()</code>.\nRepresentation of a master/slave pty pair\nThis is the parent process of the underlying fork.\nRepresentation of the Master device in a master/slave pty …\nCreate a new process operating in a pseudoterminal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrant access to a slave pseudoterminal (see <code>grantpt(3)</code>)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe master port in a virtual pty pair\nCreate a new pseudoterminal, returning the slave and …\nOpen a pseudoterminal device (see <code>posix_openpt(3)</code>)\nGet the name of the slave pseudoterminal (see <code>ptsname(3)</code>)\nGet the name of the slave pseudoterminal (see <code>ptsname(3)</code>)\nThe slave port in a virtual pty pair\nUnlock a pseudoterminal master/slave pseudoterminal pair …\nThe PID of the fork’s child process\nA file descriptor referring to master side of the …\nInterfaces for managing memory-backed files.\nprctl is a Linux-only API for performing operations on a …\nOperating system signals.\nInterface for the <code>signalfd</code> syscall.\nGet filesystem statistics, non-portably\nGet filesystem statistics\nAn interface for controlling asynchronous communication …\nGet system identification\nWait for a process to change status\nAllow sealing operations on this file.\nSet the close-on-exec (<code>FD_CLOEXEC</code>) flag on the new file …\nAnonymous file will be created using huge pages. It should …\nhugetlb size of 16GB.\nhugetlb size of 16MB.\nhugetlb size of 1GB.\nFollowing are to be used with [<code>MFD_HUGETLB</code>], indicating …\nhugetlb size of 256MB.\nhugetlb size of 2GB.\nhugetlb size of 2MB.\nhugetlb size of 32MB.\nhugetlb size of 512MB.\nhugetlb size of 8MB.\nOptions that change the behavior of <code>memfd_create</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates an anonymous file that lives in memory, and return …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUses the system-wide default.\nThe thread will receive SIGBUS as soon as a memory …\nThe process is killed only when it accesses a corrupted …\nThe type of hardware memory corruption kill policy for the …\nClear the thread memory corruption kill policy and use the …\nReturns the argument unchanged.\nGet the “child subreaper” attribute for this process\nGet the dumpable attribute for this process.\nGet the “keep capabilities” attribute for this process\nGet the thread memory corruption kill policy\nReturn the name of the calling thread\nGet the “no new privs” attribute for the calling …\nReturns the current parent-death signal\nGet the “THP disable” flag for the calling thread.\nGet the timerslack for the calling thread.\nCalls <code>U::from(self)</code>.\nSet the “child subreaper” attribute for this process\nSet the dumpable attribute which determines if core dumps …\nSet the “keep capabilities” attribute for this …\nSet the thread memory corruption kill policy\nSet the name of the calling thread. Strings longer than 15 …\nSet the calling threads “no new privs” attribute. Once …\nSet the parent-death signal of the calling process. This …\nSet the state of the “THP disable” flag for the …\nSets the timer slack value for the calling thread. Timer …\nSet an identifier (or reset it) to the address memory …\nDisable all performance counters attached to the calling …\nEnable all performance counters attached to the calling …\nUse the given signal-catching function, which takes in the …\nWhen catching a <code>Signal::SIGCHLD</code> signal, the signal will be …\nWhen catching a <code>Signal::SIGCHLD</code> signal, the system will not\nFurther occurrences of the delivered signal are not masked …\nThe system will deliver the signal to the process on a …\nThe handler is reset back to the default at the moment the …\nRequests that certain system calls restart if interrupted …\nThis flag is controlled internally by Nix.\nAbort\nAlarm clock\nBus error\nTo parent on child stop or exit\nContinue a stopped process\nFloating point exception\nHangup\nIllegal instruction (not reset when caught)\nInterrupt\nInput/output possible signal\nAlias for <code>SIGABRT</code>\nKill (cannot be caught or ignored)\nWrite on a pipe with no one to read it\nAlias for <code>SIGIO</code>\nProfiling time alarm\nPower failure imminent.\nQuit\nSegmentation violation\nStack fault (obsolete)\nSendable stop signal not from tty\nBad system call\nSoftware termination signal from kill\nTrace trap (not reset when caught)\nStop signal from tty\nTo readers pgrp upon background tty read\nLike TTIN if (tp-&gt;t_local&amp;LTOSTOP)\nAlias for <code>SIGSYS</code>\nUrgent condition on IO channel\nUser defined signal 1\nUser defined signal 2\nVirtual time alarm\nWindow size changes\nExceeded CPU time limit\nExceeded file size limit\nThe new mask is the union of the current mask and the …\nThe current mask is replaced by the specified set.\nThe new mask is the intersection of the current mask and …\nControls the behavior of a <code>SigAction</code>\nAction to take on receipt of a signal. Corresponds to …\nUse the given signal-catching function, which takes in the …\nDefault signal handling.\nUsed to request asynchronous notification of the …\nA signal handler.\nRequest that the signal be ignored.\nSpecifies a set of <code>Signal</code>s that may be blocked, waited …\nIterator for a <code>SigSet</code>.\nNo notification will be delivered\nSpecifies the notification method used by a <code>SigEvent</code>\nNotify by delivering a signal to the process.\nNotify by delivering a signal to a thread.\nSpecifies how certain functions should manipulate a signal …\nTypes of operating system signals\nIterate through all signals defined by this operating …\nAdd the specified signal to the set.\nGet a flags value with all known bits set.\nInitialize to include all signals.\nReturns a mutable pointer to the <code>sigevent</code> wrapped by <code>self</code>\nReturns name of signal.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemove all signals from this set.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn whether this set includes the specified signal.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nInitialize to include nothing.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the flags set on the action.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConverts a <code>libc::sigset_t</code> object to a <code>SigSet</code> without …\nReturns the action’s handler.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nReturns an iterator that yields the signals contained in …\nYield a set of contained named flags values.\nIterate through all signals defined by this OS\nSend a signal to a process\nSend a signal to a process group\nReturns the set of signals that are blocked during …\nCreates a new action.\n<strong>Note:</strong> this constructor does not allow the user to set the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nManages the signal mask (set of blocked signals) for the …\nSend a signal to the current thread\nThe intersection of a source flags value with the …\nRemove the specified signal from this set.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChanges the action taken by a process on receipt of a …\nReturn a copy of the inner structure\nSignal management (see signal(3p))\nExamine and change blocked signals.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWait for a signal\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAdds the set of signals to the signal mask for the calling …\nGets the currently blocked (masked) set of signals for the …\nSets the set of signals as the signal mask for the calling …\nSets the set of signals as the signal mask, and returns …\nRemoves the set of signals from the signal mask for the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIdentifies a thread for <code>SigevNotify::SigevThreadId</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSuspends execution of the calling thread until one of the …\nWill be present in the <code>si_value</code> field of the …\nWill be present in the <code>si_value</code> field of the …\nSignal to deliver\nSignal to send\nLWP ID of the thread to notify\nA helper struct for creating, reading and closing a …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreates a new file descriptor for reading signals.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlags for <code>fchmodat</code> function.\n“File mode / permissions” flags.\n“File type” flags for <code>mknod</code> and related functions.\nRead for group.\nRead for other.\nRead for owner.\nRead write and execute for group.\nRead, write and execute for other.\nRead, write and execute for owner.\nSet group id on execution.\nSet user id on execution.\nWrite for group.\nWrite for other.\nWrite for owner.\nExecute for group.\nExecute for other.\nExecute for owner.\nFlags for <code>utimensat</code> function.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nChange the file permission bits of the file specified by a …\nChange the file permission bits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nChange the access and modification times of the file …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nChange the access and modification times of a file without …\nCreate a special or ordinary file, by pathname.\nCreate a special or ordinary file, relative to a given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nChange the access and modification times of a file.\nChange the access and modification times of a file.\nDescribes the file system type as known by the operating …\nDescribes a mounted file system\nSize of a block\nTotal data blocks in filesystem\nFree blocks available to unprivileged user\nFree blocks in filesystem\nTotal file nodes in filesystem\nFree file nodes in filesystem\nFilesystem ID\nMagic code defining system type\nGet the mount flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifies a mounted file system\nDescribes a mounted file system.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum length of filenames\nOptimal transfer block size\nDescribes a mounted file system.\nFile system mount Flags\nAppend-only file\nImmutable file\nAllow mandatory locks on the filesystem\nDo not update access times on files\nDo not interpret character or block-special devices\nDo not update access times on files\nDo not allow execution of binaries on the filesystem\nDo not allow the set-uid bits to have an effect\nRead Only\nUpdate access time relative to modify/change time\nAll IO should be done synchronously\nWrite on file/directory/symlink\nWrapper around the POSIX <code>statvfs</code> struct\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nget the file system block size\nGet the number of blocks.\nGet the number of free blocks for unprivileged users\nGet the number of free blocks in the file system\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the total number of file inodes\nGet the number of free file inodes for unprivileged users\nGet the number of free file inodes\nGet the file system id\nGet the mount flags\nGet the fundamental file system block size\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn a <code>Statvfs</code> object with information about <code>fd</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGet the maximum filename length\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturn a <code>Statvfs</code> object with information about the <code>path</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSystem info structure returned by <code>sysinfo</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the load average tuple.\nCurrent number of processes.\nReturns the total amount of installed RAM in Bytes.\nReturns the amount of completely unused RAM in Bytes.\nReturns the amount of unused swap memory in Bytes.\nReturns the amount of swap memory in Bytes.\nReturns system information.\nReturns the time since system boot.\nBaud rates supported by the system.\nFlags for setting the control mode of a terminal\nSpecify how transmission flow should be altered\nSpecify a combination of the input and output buffers to …\nFlags for configuring the input mode of a terminal\nFlags for setting any local modes\nFlags for configuring the output mode of a terminal\nSpecify when a port configuration change should occur.\nIndices into the <code>termios.c_cc</code> array for special characters.\nFlush data that was received but not read\nTransmit a STOP character, which should disable a …\nFlush both received data not read and written data not …\nTransmit a START character, which should re-enable a …\nFlush data written but not transmitted\nSuspend transmission\nResume transmission\nThe change occurs after all output has been written\nSame as <code>TCSADRAIN</code>, but will also flush the input buffer\nThe change will occur immediately\nStores settings for the termios API\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet input baud rate (see cfgetispeed(3p)).\nGet output baud rate (see cfgetospeed(3p)).\nConfigures the port to something like the “raw” mode …\nSet input baud rate (see cfsetispeed(3p)).\nSet output baud rate (see cfsetospeed(3p)).\nSet both the input and output baud rates (see termios(3)).\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nControl characters (see <code>termios.c_cc</code> documentation)\nControl mode flags (see <code>termios.c_cflag</code> documentation)\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nInput mode flags (see <code>termios.c_iflag</code> documentation)\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLine discipline (see <code>termios.c_line</code> documentation)\nLocal mode flags (see <code>termios.c_lflag</code> documentation)\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOutput mode flags (see <code>termios.c_oflag</code> documentation)\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBlock until all output data is written (see tcdrain(3p)).\nSuspend or resume the transmission or reception of data …\nDiscard data in the output or input queue (see tcflush(3p)…\nReturn the configuration of a port tcgetattr(3p)).\nGet the session controlled by the given terminal (see …\nSend a break for a specific duration (see tcsendbreak(3p)).\nSet the configuration for a terminal (see tcsetattr(3p)).\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate the timestamp to <code>Now</code>\nLeave the timestamp unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>TimeSpec</code> with given number of microseconds.\nMakes a new <code>TimeVal</code> with given number of microseconds.\nMakes a new <code>TimeSpec</code> with given number of nanoseconds.\nMakes a new <code>TimeVal</code> with given number of nanoseconds.  …\nConstruct a new <code>TimeSpec</code> from its components\nConstruct a new <code>TimeVal</code> from its components\nDescribes the running system.  Return type of <code>uname</code>.\nNIS or YP domain name of this machine.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMachine hardware platform.\nNetwork name of this machine.\nRelease level of the operating system.\nName of the operating system implementation.\nGet system identification\nVersion level of the operating system.\nWait for any child\nThe process was previously stopped but has resumed …\nThe process exited normally (as with <code>exit()</code> or returning …\nThe ID argument for <code>waitid</code>\nWait for the child whose process group ID matches the …\nWait for the child referred to by the given PID file …\nWait for the child whose process ID matches the given PID\nThe traced process was stopped by a <code>PTRACE_EVENT_*</code> event. …\nThe traced process was stopped by execution of a system …\nThe process was killed by the given signal. The third field\nThere are currently no state changes to report in any …\nThe process is alive, but was stopped by the given signal. …\nReport the status of selected processes that have …\nReport the status of selected processes which have …\nDo not block when there are no processes wishing to report …\nDon’t reap, just poll status.\nAn alias for WUNTRACED.\nReport the status of selected processes which are stopped …\nControls the behavior of <code>waitpid</code>.\nPossible return values from <code>wait()</code> or <code>waitpid()</code>.\nWait on all children, regardless of type\nWait for “clone” children only.\nDon’t wait on children of other threads in this group\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConvert a raw <code>wstatus</code> as returned by <code>waitpid</code>/<code>wait</code> into a …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nExtracts the PID from the WaitStatus unless it equals …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWait for any child process to change status or a signal is …\nWait for a process to change status\nWait for a process to change status\nMaximum number of I/O operations in a single list I/O call …\nMaximum number of outstanding asynchronous I/O operations …\nThe maximum amount by which a process can decrease its …\nMaximum length of argument to the exec functions including …\nMaximum number of functions that may be registered with …\nOptions for access()\nMaximum obase values allowed by the bc utility.\nMaximum number of elements permitted in an array by the bc …\nMaximum scale value allowed by the bc utility.\nMaximum length of a string constant accepted by the bc …\nMaximum number of simultaneous processes per real user ID.\nThe frequency of the statistics clock in ticks per second.\nMaximum number of weights that can be assigned to an entry …\nThis is the child process of the fork.\nMaximum number of timer expiration overruns.\nMaximum number of expressions that can be nested within …\nMinimum number of bits needed to represent, as a signed …\nTest for existence of file.\nRepresents the successful result of calling <code>fork</code>\nInitial size of <code>getgrgid_r</code> and <code>getgrnam_r</code> data buffers\nInitial size of <code>getpwuid_r</code> and <code>getpwnam_r</code> data buffers\nGroup identifier\nRepresentation of a Group, based on <code>libc::group</code>\nMaximum length of a host name (not including the …\nMaximum number of iovec structures that one process has …\nUnless otherwise noted, the maximum length, in bytes, of a …\nMaximum number of links to a single file.\nMaximum length of a login name.\nMaximum number of bytes in a terminal canonical input line.\nMinimum number of bytes for which space is available in a …\nThe maximum number of open message queue descriptors a …\nThe maximum number of message priorities supported by the …\nMaximum number of bytes in a filename (not including the …\nMaximum number of simultaneous supplementary group IDs per …\nRemove the directory entry as a normal file, not a …\nA value one greater than the maximum value that the system …\nThe size of a system page in bytes.\nMaximum number of bytes the implementation will store as a …\nMaximum number of bytes that is guaranteed to be atomic …\nSymbolic links can be created.\nMinimum number of bytes of storage actually allocated for …\nRecommended increment for file transfer sizes between the …\nMaximum recommended file transfer size.\nMinimum recommended file transfer size.\nRecommended file transfer buffer alignment.\nMaximum number of attempts made to destroy a thread’s …\nMaximum number of data keys that can be created by a …\nMinimum size in bytes of thread stack storage.\nMaximum number of threads that can be created per process.\nThis is the parent process of the fork.\nVariable names for <code>pathconf</code>\nProcess identifier\nThe maximum number of repeated occurrences of a regular …\nConstant for UID = 0\nMaximum number of realtime signals reserved for …\nTest for read permission.\nRemove the directory entry as a directory, not a normal …\nReal, effective and saved group IDs.\nReal, effective and saved user IDs.\nMaximum number of semaphores that a process may have.\nThe maximum value a semaphore may have.\nMaximum number of queued signals that a process may send …\nThe minimum maximum number of streams that a process may …\nMaximum number of bytes in a symbolic link.\nMaximum number of symbolic links that can be reliably …\nSpecify an offset relative to the current file location.\nSpecify an offset relative to the next location in the …\nSpecify an offset relative to the end of the file.\nSpecify an offset relative to the next hole in the file …\nSpecify an offset relative to the start of the file.\nVariable names for <code>sysconf</code>\nMaximum number of timers per process supported.\nMaximum length of terminal device name.\nThe minimum maximum number of types supported for the name …\nUser identifier\nFlags for <code>unlinkat</code> function.\nRepresentation of a User, based on <code>libc::passwd</code>\nTest for write permission.\nDirective that tells <code>lseek</code> and <code>lseek64</code> what the offset is …\nTest for execute (search) permission.\nThe number of currently available pages of physical memory.\nThe number of processors configured.\nThe number of processors currently online (available).\nThe number of pages of physical memory. Note that it is …\nThe implementation supports the Terminal Characteristics …\nThe implementation supports the C-Language Binding option.\nThe implementation supports the C-Language Development …\nThe implementation supports the FORTRAN Development …\nThe implementation supports the FORTRAN Runtime Utilities …\nThe implementation supports the creation of locales by the …\nThe implementation supports the Batch Environment Services …\nThe implementation supports the Batch Accounting option.\nThe implementation supports the Batch Checkpoint/Restart …\nThe implementation supports the Locate Batch Job Request …\nThe implementation supports the Batch Job Message Request …\nThe implementation supports the Track Batch Job Request …\nThe implementation supports the Software Development …\nThe implementation supports the User Portability Utilities …\nInteger value indicating version of the Shell and …\nThe implementation supports the Advisory Information …\nThe implementation supports asynchronous input and output.\nAsynchronous input or output operations may be performed …\nThe implementation supports barriers.\nThe use of <code>chown</code> and <code>fchown</code> is restricted to a process with\nThe implementation supports clock selection.\nThe implementation supports the Process CPU-Time Clocks …\nThe implementation supports the File Synchronization …\nThe implementation supports the IPv6 option.\nThe implementation supports job control.\nThe implementation supports memory mapped Files.\nThe implementation supports the Process Memory Locking …\nThe implementation supports the Range Memory Locking …\nThe implementation supports memory protection.\nThe implementation supports the Message Passing option.\nThe implementation supports the Monotonic Clock option.\nPathname components longer than {NAME_MAX} generate an …\nThe implementation supports the Prioritized Input and …\nThe implementation supports the Process Scheduling option.\nPrioritized input or output operations may be performed …\nThe implementation supports the Raw Sockets option.\nThe implementation supports read-write locks.\nThe implementation supports realtime signals.\nThe implementation supports the Regular Expression …\nEach process has a saved set-user-ID and a saved …\nThe implementation supports semaphores.\nThe implementation supports the Shared Memory Objects …\nThe implementation supports the POSIX shell.\nThe implementation supports the Spawn option.\nThe implementation supports spin locks.\nThe implementation supports the Process Sporadic Server …\nThe number of replenishment operations that can be …\nThe implementation supports the Synchronized Input and …\nSynchronized input or output operations may be performed …\nThe implementation supports threads.\nThe implementation supports the Thread Stack Address …\nThe implementation supports the Thread Stack Size …\nThe implementation supports the Thread CPU-Time Clocks …\nThe implementation supports the Thread Execution …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Thread Process-Shared …\nThe implementation supports the Robust Mutex Priority …\nThe implementation supports the Robust Mutex Priority …\nThe implementation supports thread-safe functions.\nThe implementation supports the Thread Sporadic Server …\nThe implementation supports timeouts.\nThe implementation supports timers.\nThe implementation supports the Trace option.\nThe implementation supports the Trace Event Filter option.\nMaximum size of a trace event name in characters.\nThe implementation supports the Trace Inherit option.\nThe implementation supports the Trace Log option.\nThe length in bytes of a trace generation version string …\nMaximum number of times <code>posix_trace_create</code> may be called …\nMaximum number of user trace event type identifiers for a …\nThe implementation supports the Typed Memory Objects …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThis symbol shall be defined to be the value of a …\nInteger value indicating version of this standard …\nThe implementation supports the X/Open Encryption Option …\nThe implementation supports the Issue 4, Version 2 Enhanced\nThe implementation supports the XOpen Legacy Option group.\nThe implementation supports the X/Open Realtime Option …\nThe implementation supports the X/Open Realtime Threads …\nThe implementation supports the Issue 4, Version 2 Shared …\nThe implementation supports the XSI STREAMS Option Group.\nThe implementation supports the XSI option\nInteger value indicating version of the X/Open Portability …\nChecks the file named by <code>path</code> for accessibility according …\nAlarm signal scheduling.\nGet a flags value with all known bits set.\nGet the raw <code>uid_t</code> wrapped by <code>self</code>.\nGet the raw <code>gid_t</code> wrapped by <code>self</code>.\nGet the raw <code>pid_t</code> wrapped by <code>self</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the current working directory of the calling …\nChange the ownership of the file at <code>path</code> to be owned by …\nChange a process’s root directory\nClose a raw file descriptor\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns Uid of calling process. This is practically a more …\nReturns Gid of calling process. This is practically a more …\nDaemonize this process by detaching from the controlling …\nThe intersection of a source flags value with the …\nHome directory\nCreate a copy of the specified file descriptor (see dup(2)…\nCreate a copy of the specified file descriptor using the …\nCreate a new copy of the specified file descriptor using …\nChecks the file named by <code>path</code> for accessibility according …\nReturns effective Uid of calling process. This is …\nReturns effective Gid of calling process. This is …\nEffective UID\nEffective GID\nGet a flags value with all bits unset.\nReplace the current process image with a new one (see …\nReplace the current process image with a new one (see …\nExecute program relative to a directory file descriptor …\nReplace the current process image with a new one and …\nReplace the current process image with a new one and …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nChecks the file named by <code>path</code> for accessibility according …\nChange the current working directory of the process to the …\nChange the ownership of the file referred to by the open …\nChange the ownership of the file at <code>path</code> to be owned by …\nSynchronize the data of a file\nReplace the current process image with a new one (see …\nCreate a new child process duplicating the parent process (…\nLike <code>pathconf</code>, but works with file descriptors instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a group by GID.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a user by name.\nGet a group by name.\nCreates <code>Uid</code> from raw <code>uid_t</code>.\nCreates <code>Gid</code> from raw <code>gid_t</code>.\nCreates <code>Pid</code> from raw <code>pid_t</code>.\nGet a user by UID.\nSynchronize changes to a file\nTruncate a file to a specified length\nUser information\nReturns the current directory as a <code>PathBuf</code>\nGet the effective group ID\nGet the effective user ID\nGet the real group ID\nCalculate the supplementary group access list.\nGet the list of supplementary group IDs of the calling …\nGet the host name and store it in an internally allocated …\nGet process group\nGet the group id of the calling process (see getpgrp(3)).\nGet the pid of this process (see getpid(2)).\nGet the pid of this processes’ parent (see getpid(2)).\nGets the real, effective, and saved group IDs.\nGets the real, effective, and saved user IDs.\nGet the process group ID of a session leader getsid(2).\nGet the caller’s thread ID (see gettid(2).\nGet a real user ID\nGroup ID\nGroup ID\nInitialize the supplementary group access list.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturn <code>true</code> if this is the child process of the <code>fork()</code>\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this is the parent process of the <code>fork()</code>\nReturns true if the <code>Uid</code> represents privileged user - root. …\nDetermines if the file descriptor refers to a valid …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLink one file to another file\nMove the read/write file offset.\nMove the read/write file offset.\nList of Group members\nCreates new directory <code>path</code> with access rights <code>mode</code>.  (see …\nCreates a directory which persists even after process …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates a regular file which persists even after process …\nUsername\nGroup name\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns PID of parent of calling process\nUser password (probably hashed)\nGroup password\nGet path-dependent configurable system variables (see …\nSuspend the thread until a signal is received.\nCreate an interprocess channel.\nLike <code>pipe</code>, but allows setting certain file descriptor …\nChange the root file system.\nRead from a raw file descriptor.\nReal UID\nReal GID\nThe intersection of a source flags value with the …\nSaved UID\nSaved GID\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the effective group ID\nSet the effective user ID\nSet the group identity used for filesystem checks …\nSet the user identity used for filesystem checks …\nSet the group ID\nSet the list of supplementary group IDs for the calling …\nSet the system host name (see sethostname(2)).\nSet a process group ID (see setpgid(2)).\nSets the real, effective, and saved gid. (see setresuid(2))\nSets the real, effective, and saved uid. (see setresuid(2))\nCreate new session and set process group id (see setsid(2)…\nSet the user ID\nPath to shell\nSuspend execution for an interval of time\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCreates a symbolic link at <code>path2</code> which points to <code>path1</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCommit filesystem caches to disk\nCommit filesystem caches containing file referred to by …\nGet configurable system variables (see sysconf(3))\nGet the terminal foreground process group (see tcgetpgrp(3)…\nSet the terminal foreground process group (see tcgetpgrp(3)…\nReturns PID of calling process\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTruncate a file to a specified length\nGet the name of the terminal device that is open on file …\nUser ID\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a directory entry\nRemove a directory entry\nWrite to a raw file descriptor.\nThe PID of the fork’s child process\nCancel an previously set alarm signal.\nSchedule an alarm signal.")