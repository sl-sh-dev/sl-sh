#!/usr/bin/env slosh

(load "core.slosh")
;; benchmark on lists?

(defn build-vec (fst-elem limit)
    (let (v (make-vec limit 0))
        (set! v.0 fst-elem)
        v))

(defn naive-recursive-find (pred x limit)
    (cond ((empty? x) nil)
          ((pred (vec-pop! x) limit) #t)
          (#t (recur pred x limit))))


(defn naive-continuation-find (pred x limit)
    (call/cc
      (fn (cont)
        (let (helper
                   (fn (pred x limit)
                     (cond ((nil? x)       (cont nil))
                           ((pred (vec-pop! x) limit) (cont #t))
                           (#t (helper pred x limit)))))
          (helper pred x limit)))))


(defn is-limit (x limit) (= limit x))

(defn run-recursive (limit)
    (test::assert-true (naive-recursive-find is-limit (build-vec limit limit) limit)))

(defn run-continuation (limit)
    (test::assert-true (naive-continuation-find is-limit (build-vec limit limit) limit)))
